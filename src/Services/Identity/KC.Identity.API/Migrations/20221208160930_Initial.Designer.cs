// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using KC.Identity.API.Persistence;

#nullable disable

namespace KC.Identity.API.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20221208160930_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("id")
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KC.Identity.API.Entities.Org", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(-1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreateDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(91)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(94);

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(92);

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(93);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(82);

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit")
                        .HasColumnOrder(81);

                    b.Property<string>("LegalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(9)
                        .HasAnnotation("DynamicDataMask", "default()")
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Other\",\"Rank\":\"NONE\"}");

                    b.Property<string>("LicenseState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(10);

                    b.Property<DateTime?>("ModifyDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(95)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ModifySource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<int?>("ModifyUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(96);

                    b.Property<string>("ModifyUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(97);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5)
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(11);

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(8)
                        .HasAnnotation("DynamicDataMask", "default()")
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Confidential\",\"InformationType\":\"National ID\",\"Rank\":\"CRITICAL\"}");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Orgs", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("History_Orgs");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("KC.Identity.API.Entities.OrgUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(-1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(91)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(94);

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(92);

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(93);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(82);

                    b.Property<bool>("IsInviteProcessed")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsInvited")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit")
                        .HasColumnOrder(81);

                    b.Property<DateTime?>("ModifyDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(95)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ModifySource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<int?>("ModifyUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(96);

                    b.Property<string>("ModifyUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(97);

                    b.Property<int>("OrgId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(100);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("OrgId", "UserId")
                        .IsUnique();

                    b.ToTable("OrgUsers", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("History_OrgUsers");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("KC.Identity.API.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(-1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CreateDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(91)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(94);

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(92);

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(93);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(82);

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit")
                        .HasColumnOrder(81);

                    b.Property<DateTime?>("ModifyDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(95)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ModifySource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<int?>("ModifyUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(96);

                    b.Property<string>("ModifyUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(97);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("History_Permissions");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("KC.Identity.API.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(-1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(91)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(94);

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(92);

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(93);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(82);

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit")
                        .HasColumnOrder(81);

                    b.Property<DateTime?>("ModifyDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(95)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ModifySource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<int?>("ModifyUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(96);

                    b.Property<string>("ModifyUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(97);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<int?>("OrgId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("OrgType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("Roles", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("History_Roles");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("KC.Identity.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(-1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("AuthProviderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreateDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(91)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(94);

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(92);

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(93);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5)
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Confidential\",\"InformationType\":\"Contact Info\",\"Rank\":\"MEDIUM\"}");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3)
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Confidential\",\"InformationType\":\"Name\",\"Rank\":\"MEDIUM\"}");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(82);

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit")
                        .HasColumnOrder(81);

                    b.Property<DateTime?>("LastLoginDateTimeUtc")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("LastLogoutDateTimeUtc")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4)
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Confidential\",\"InformationType\":\"Name\",\"Rank\":\"MEDIUM\"}");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6)
                        .HasAnnotation("DynamicDataMask", "default()")
                        .HasAnnotation("SensitivityClassification", "{\"Label\":\"Confidential\",\"InformationType\":\"Contact Info\",\"Rank\":\"MEDIUM\"}");

                    b.Property<DateTime?>("ModifyDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(95)
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ModifySource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(98);

                    b.Property<int?>("ModifyUserId")
                        .HasColumnType("int")
                        .HasColumnOrder(96);

                    b.Property<string>("ModifyUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(97);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("AuthProvider", "AuthProviderId")
                        .IsUnique()
                        .HasFilter("[AuthProvider] IS NOT NULL AND [AuthProviderId] IS NOT NULL");

                    b.ToTable("Users", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("History_Users");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolePermissions", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("History_RolePermissions", "id");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("KC.Identity.API.Entities.Org", b =>
                {
                    b.OwnsMany("KC.Domain.Common.ValueObjects.Addresses.Address", "Addresses", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnOrder(1);

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address1")
                                .HasColumnOrder(21)
                                .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                            b1.Property<string>("Address2")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address2")
                                .HasColumnOrder(22)
                                .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City")
                                .HasColumnOrder(23)
                                .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Country")
                                .HasColumnOrder(26);

                            b1.Property<string>("County")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("County")
                                .HasColumnOrder(24)
                                .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                            b1.Property<string>("GooglePlaceId")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("GooglePlaceId")
                                .HasColumnOrder(29);

                            b1.Property<int>("OrgId")
                                .HasColumnType("int")
                                .HasColumnOrder(2);

                            b1.Property<DateTime>("PeriodEnd")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodEnd");

                            b1.Property<DateTime>("PeriodStart")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodStart");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("State")
                                .HasColumnOrder(25)
                                .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                            b1.Property<string>("TimeZone")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("TimeZone")
                                .HasColumnOrder(28);

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("Type")
                                .HasColumnOrder(20);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("ZipCode")
                                .HasColumnOrder(27)
                                .HasAnnotation("SensitivityClassification", "{\"Label\":\"Public\",\"InformationType\":\"Contact Info\",\"Rank\":\"NONE\"}");

                            b1.HasKey("Id");

                            b1.HasIndex("OrgId");

                            b1.ToTable("OrgAddresses", "id");

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                {
                                    ttb.UseHistoryTable("History_OrgAddresses");
                                    ttb
                                        .HasPeriodStart("PeriodStart")
                                        .HasColumnName("PeriodStart");
                                    ttb
                                        .HasPeriodEnd("PeriodEnd")
                                        .HasColumnName("PeriodEnd");
                                }
                            ));

                            b1.WithOwner()
                                .HasForeignKey("OrgId");
                        });

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("KC.Identity.API.Entities.OrgUser", b =>
                {
                    b.HasOne("KC.Identity.API.Entities.Org", "Org")
                        .WithMany("Users")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KC.Identity.API.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KC.Identity.API.Entities.User", "User")
                        .WithMany("Orgs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KC.Identity.API.Entities.Role", b =>
                {
                    b.HasOne("KC.Identity.API.Entities.Org", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("KC.Identity.API.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KC.Identity.API.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KC.Identity.API.Entities.Org", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KC.Identity.API.Entities.User", b =>
                {
                    b.Navigation("Orgs");
                });
#pragma warning restore 612, 618
        }
    }
}
